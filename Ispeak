<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Points Center — Вход</title>
  <link rel="stylesheet" href="styles.css"/>
</head>
<body>
<header><h1>Points Center — Вход</h1></header>
<div class="container">
  <div class="card">
    <h2>Войти</h2>
    <div class="flex">
      <input type="text" id="login" placeholder="Логин" style="flex:1 1 200px;">
      <input type="password" id="password" placeholder="Пароль" style="flex:1 1 200px;">
      <button id="go">Войти</button>
    </div>
    <p>Директор: <b>missveronika / Kazakhstan08</b></p>
    <p>Учителя: <b>teacher1/teacher1</b>, <b>teacher2/teacher2</b>, <b>teacher3/teacher3</b></p>
    <p><button class="link" id="guest">Зайти как гость (только просмотр)</button></p>
  </div>
</div>
<script src="app.js"></script>
<script>
  document.getElementById('go').onclick = () => {
    const u = document.getElementById('login').value.trim();
    const p = document.getElementById('password').value.trim();
    if(!login(u,p)) { alert('Неверный логин или пароль'); return; }
    const role = roleOf(u);
    if(role === 'director') location.href = 'director.html';
    else if(role === 'teacher') location.href = u + '.html';
    else location.href = 'guest.html';
  };
  document.getElementById('guest').onclick = () => location.href = 'guest.html';
</script>
</body>
</html>
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Points Center — Директор</title>
  <link rel="stylesheet" href="styles.css"/>
</head>
<body>
<header><h1>Points Center — Панель директора</h1></header>
<div class="container">

  <div class="card">
    <div class="flex-between">
      <h2>Создать группу</h2>
      <button class="link" onclick="logout()">Выйти</button>
    </div>
    <div class="flex">
      <input id="gName" placeholder="Название группы" style="flex:1 1 240px;">
      <select id="gTeacher">
        <option value="teacher1">teacher1</option>
        <option value="teacher2">teacher2</option>
        <option value="teacher3">teacher3</option>
        <option value="missveronika">missveronika (директор)</option>
      </select>
      <label class="checkbox"><input type="checkbox" id="gPrivate"> Приватная (видна только директору)</label>
      <button onclick="createGroup()">Добавить</button>
    </div>
  </div>

  <div id="groupsRoot"></div>

</div>
<script src="app.js"></script>
<script>
  const username = 'missveronika';
  const role = 'director';
  let db = loadDB();

  function logout(){ location.href = 'index.html'; }

  function createGroup(){
    const name = document.getElementById('gName').value.trim();
    const teacher = document.getElementById('gTeacher').value;
    const isPrivate = document.getElementById('gPrivate').checked;
    if(!name) return;
    addGroup(db, {name, teacher, isPrivate});
    document.getElementById('gName').value='';
    render();
  }

  // drag&drop
  let draggedStudent = null;

  function render(){
    db = loadDB();
    const root = document.getElementById('groupsRoot');
    root.innerHTML='';
    const groups = Object.values(db.groups).sort((a,b)=>a.createdAt-b.createdAt);
    if(!groups.length){ root.innerHTML='<div class="card"><p>Групп пока нет</p></div>'; return; }

    groups.forEach(g=>{
      const card = document.createElement('div');
      card.className='card group-drop-zone';
      card.dataset.groupId = g.id;

      // dnd target
      card.ondragover = e => { e.preventDefault(); card.classList.add('dragover'); };
      card.ondragleave = () => card.classList.remove('dragover');
      card.ondrop = e => {
        e.preventDefault();
        card.classList.remove('dragover');
        if(!draggedStudent) return;
        moveStudent(db, draggedStudent.studentId, g.id);
        draggedStudent = null;
        render();
      };

      const header = document.createElement('div');
      header.className='flex-between';
      header.innerHTML = '<h2>'+g.name+' <span class="badge">'+g.teacher+(g.isPrivate?' • приватная':'')+'</span></h2>';
      const delBtn = document.createElement('button');
      delBtn.className='danger';
      delBtn.textContent='Удалить группу';
      delBtn.onclick = ()=>{ if(confirm('Удалить группу?')){ deleteGroup(db,g.id); render(); } };
      header.appendChild(delBtn);
      card.appendChild(header);

      // добавить ученика
      const addRow = document.createElement('div');
      addRow.className='flex';
      addRow.innerHTML = '<input placeholder="Имя ученика" id="name_'+g.id+'" style="flex:1 1 200px;">';
      const addBtn = document.createElement('button');
      addBtn.textContent='Добавить ученика';
      addBtn.onclick = ()=>{
        const v = document.getElementById('name_'+g.id).value.trim();
        if(!v) return;
        addStudent(db,{groupId:g.id,name:v});
        render();
      };
      addRow.appendChild(addBtn);
      card.appendChild(addRow);

      // список учеников
      const list = document.createElement('div');
      const studs = getStudentsByGroup(db,g.id);
      studs.forEach((s)=>{
        const row = document.createElement('div');
        row.className='student';
        row.draggable = true;
        row.ondragstart = e => {
          draggedStudent = { studentId: s.id };
          row.classList.add('dragging');
        };
        row.ondragend = e => {
          row.classList.remove('dragging');
        };

        const left = document.createElement('div');
        left.innerHTML = '<b>'+s.name+'</b> — '+s.points+' баллов';
        row.appendChild(left);

        const right = document.createElement('div');
        right.className='history';

        // операции
        const ops = document.createElement('div');
        ops.className='flex';
        ops.innerHTML = `
          <input type="number" class="points-input" id="delta_${s.id}" value="1">
          <button onclick="plus('${s.id}')">+</button>
          <button onclick="minus('${s.id}')">-</button>
          <button class="danger" onclick="delStudent('${s.id}')">Удалить</button>
        `;

        // история (с выборочным удалением)
        const histBox = document.createElement('div');
        histBox.className='history';
        if(!s.history.length){
          histBox.innerHTML='<i>История пуста</i>';
        }else{
          s.history.slice().reverse().forEach((h,i)=>{
            const realIndex = s.history.length-1-i;
            const item = document.createElement('div');
            item.className='history-item';
            item.innerHTML = `<span>${new Date(h.ts).toLocaleString()} — ${h.delta>0?'+':''}${h.delta} ${h.note?('('+h.note+')'):''}</span>`;
            const delH = document.createElement('button');
            delH.className='link';
            delH.textContent='удалить';
            delH.onclick = ()=>{ deleteHistoryEntry(db, s.id, realIndex); render(); };
            item.appendChild(delH);
            histBox.appendChild(item);
          });
        }

        right.appendChild(ops);
        right.appendChild(histBox);
        row.appendChild(right);
        list.appendChild(row);
      });
      card.appendChild(list);
      root.appendChild(card);
    });
  }

  function plus(studentId){
    const delta = Number(document.getElementById('delta_'+studentId).value||0);
    if(!delta) return;
    changePoints(db, studentId, delta, 'директор');
    render();
  }
  function minus(studentId){
    const delta = Number(document.getElementById('delta_'+studentId).value||0);
    if(!delta) return;
    changePoints(db, studentId, -delta, 'директор');
    render();
  }
  function delStudent(studentId){
    if(confirm('Удалить ученика?')){
      deleteStudent(db, studentId);
      render();
    }
  }

  render();
</script>
</body>
</html>
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Points Center — teacher1</title>
  <link rel="stylesheet" href="styles.css"/>
</head>
<body>
<header><h1>Points Center — teacher1</h1></header>
<div class="container">
  <div class="card flex-between">
    <h2>Мои группы</h2>
    <button class="link" onclick="logout()">Выйти</button>
  </div>

  <div class="card">
    <h3>Создать группу</h3>
    <div class="flex">
      <input id="gName" placeholder="Название группы" style="flex:1 1 240px;">
      <button onclick="createGroup()">Добавить</button>
    </div>
  </div>

  <div id="groupsRoot"></div>
</div>

<script src="app.js"></script>
<script>
  const username = 'teacher1';
  const role = 'teacher';
  let db = loadDB();

  function logout(){ location.href = 'index.html'; }

  function createGroup(){
    const name = document.getElementById('gName').value.trim();
    if(!name) return;
    addGroup(db, {name, teacher: username, isPrivate:false});
    document.getElementById('gName').value='';
    render();
  }

  function render(){
    db = loadDB();
    const root = document.getElementById('groupsRoot');
    root.innerHTML='';
    const groups = getGroupsForUser(db, username);
    if(!groups.length){ root.innerHTML='<div class="card"><p>Групп пока нет</p></div>'; return; }

    groups.forEach(g=>{
      const card = document.createElement('div');
      card.className='card';
      const header = document.createElement('div');
      header.className='flex-between';
      header.innerHTML = '<h2>'+g.name+' <span class="badge">'+g.teacher+'</span></h2>';
      const delBtn = document.createElement('button');
      delBtn.className='danger';
      delBtn.textContent='Удалить группу';
      delBtn.onclick = ()=>{ if(confirm('Удалить группу?')){ deleteGroup(db,g.id); render(); } };
      header.appendChild(delBtn);
      card.appendChild(header);

      const addRow = document.createElement('div');
      addRow.className='flex';
      addRow.innerHTML = '<input placeholder="Имя ученика" id="name_'+g.id+'" style="flex:1 1 200px;">';
      const addBtn = document.createElement('button');
      addBtn.textContent='Добавить ученика';
      addBtn.onclick = ()=>{
        const v = document.getElementById('name_'+g.id).value.trim();
        if(!v) return;
        addStudent(db,{groupId:g.id,name:v});
        render();
      };
      addRow.appendChild(addBtn);
      card.appendChild(addRow);

      const list = document.createElement('div');
      const studs = getStudentsByGroup(db,g.id);
      studs.forEach(s=>{
        const row = document.createElement('div');
        row.className='student';
        const left = document.createElement('div');
        left.innerHTML = '<b>'+s.name+'</b> — '+s.points+' баллов';
        row.appendChild(left);

        const right = document.createElement('div');
        right.className='history';
        const ops = document.createElement('div');
        ops.className='flex';
        ops.innerHTML = `
          <input type="number" class="points-input" id="delta_${s.id}" value="1">
          <button onclick="plus('${s.id}')">+</button>
          <button onclick="minus('${s.id}')">-</button>
          <button class="danger" onclick="delStudent('${s.id}')">Удалить</button>
        `;

        const histBox = document.createElement('div');
        histBox.className='history';
        if(!s.history.length){
          histBox.innerHTML='<i>История пуста</i>';
        }else{
          s.history.slice().reverse().forEach(h=>{
            const item = document.createElement('div');
            item.className='history-item';
            item.innerHTML = `<span>${new Date(h.ts).toLocaleString()} — ${h.delta>0?'+':''}${h.delta} ${h.note?('('+h.note+')'):''}</span>`;
            histBox.appendChild(item);
          });
        }

        right.appendChild(ops);
        right.appendChild(histBox);
        row.appendChild(right);
        list.appendChild(row);
      });
      card.appendChild(list);

      root.appendChild(card);
    });
  }

  function plus(studentId){
    const delta = Number(document.getElementById('delta_'+studentId).value||0);
    if(!delta) return;
    changePoints(db, studentId, delta, username);
    render();
  }
  function minus(studentId){
    const delta = Number(document.getElementById('delta_'+studentId).value||0);
    if(!delta) return;
    changePoints(db, studentId, -delta, username);
    render();
  }
  function delStudent(studentId){
    if(confirm('Удалить ученика?')){
      deleteStudent(db, studentId);
      render();
    }
  }

  render();
</script>
</body>
</html>
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Points Center — Гость</title>
  <link rel="stylesheet" href="styles.css"/>
</head>
<body>
<header><h1>Points Center — Гость</h1></header>
<div class="container">
  <div class="card">
    <p>Режим просмотра. Видны только публичные (не приватные) группы.</p>
  </div>
  <div id="content"></div>
  <p><a href="index.html">Назад ко входу</a></p>
</div>
<script src="app.js"></script>
<script>
  const db = loadDB();
  const content = document.getElementById('content');

  const groups = Object.values(db.groups).filter(g=>!g.isPrivate);
  groups.forEach(g=>{
    const card = document.createElement('div');
    card.className='card';
    card.innerHTML = '<h2>'+g.name+' <span class="badge">'+g.teacher+'</span></h2>';
    const list = document.createElement('div');
    const studs = getStudentsByGroup(db,g.id);
    studs.forEach(s=>{
      const row = document.createElement('div');
      row.className='student';
      row.innerHTML = '<div><b>'+s.name+'</b> — '+s.points+' баллов</div>';
      list.appendChild(row);
    });
    card.appendChild(list);
    content.appendChild(card);
  });
</script>
</body>
</html>
:root{
  --bg:#EFEFEF;
  --accent:#9867F9;
  --accent2:#FFD500;
  --text:#0E0000;
  --white:#ffffff;
}
*{box-sizing:border-box;font-family:system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,sans-serif}
body{margin:0;background:var(--bg);color:var(--text);}
header{background:var(--accent);color:#fff;padding:14px 20px;text-align:center;}
.container{max-width:1100px;margin:0 auto;padding:20px;}
.card{background:#fff;border-radius:8px;box-shadow:0 2px 6px rgba(0,0,0,.08);padding:16px 20px;margin-bottom:16px;}
input,select,button{font-size:16px;padding:8px 12px;border-radius:6px;border:1px solid #ddd;}
button{background:var(--accent2);color:#000;border:none;cursor:pointer;}
button.danger{background:#e74c3c;color:#fff;}
button.link{background:transparent;color:var(--accent);border:none;cursor:pointer;padding:0;}
.hidden{display:none;}
.flex{display:flex;gap:8px;align-items:center;flex-wrap:wrap;}
.flex-between{display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap;}
.group{background:#fafafa;border:1px solid #eee;border-radius:6px;padding:12px;margin-bottom:12px;}
.group.dragover{border:2px dashed var(--accent);}
.student{border-bottom:1px solid #eee;padding:6px 0;display:flex;justify-content:space-between;gap:8px;align-items:center;}
.student:last-child{border-bottom:none;}
.student.dragging{opacity:0.5;}
.points-input{width:80px;text-align:right;}
.badge{display:inline-block;background:var(--accent2);color:#000;padding:2px 6px;border-radius:12px;font-size:12px;margin-left:6px;}
.history{max-height:240px;overflow-y:auto;font-size:14px;color:#333;}
.history-item{display:flex;justify-content:space-between;gap:8px;align-items:center;border-bottom:1px dashed #eee;padding:2px 0;}
.checkbox{display:inline-flex;align-items:center;gap:6px;}
// ===== Пароли =====
const PASSWORDS = {
  missveronika: 'Kazakhstan08',
  teacher1: 'teacher1',
  teacher2: 'teacher2',
  teacher3: 'teacher3'
};

// ===== БД в localStorage =====
function loadDB(){
  const raw = localStorage.getItem('pc_db_v5');
  if(raw){
    try { return JSON.parse(raw); } catch(e){ console.error(e); }
  }
  const now = Date.now();
  const db = {
    groups: {
      g1:{id:'g1', name:'Группа A', teacher:'teacher1', isPrivate:false, createdAt:now},
      g2:{id:'g2', name:'Группа B', teacher:'teacher2', isPrivate:false, createdAt:now},
      g3:{id:'g3', name:'Группа C', teacher:'teacher3', isPrivate:false, createdAt:now},
    },
    students: {
      s1:{id:'s1', name:'Анна',   groupId:'g1', points:10, history:[{ts:now, delta:+10, note:'Старт'}]},
      s2:{id:'s2', name:'Игорь',  groupId:'g1', points:5,  history:[{ts:now, delta:+5, note:'Старт'}]},
      s3:{id:'s3', name:'Мария',  groupId:'g2', points:7,  history:[{ts:now, delta:+7, note:'Старт'}]},
      s4:{id:'s4', name:'Сергей', groupId:'g3', points:3,  history:[{ts:now, delta:+3, note:'Старт'}]},
    }
  };
  saveDB(db);
  return db;
}
function saveDB(db){ localStorage.setItem('pc_db_v5', JSON.stringify(db)); }
function uid(prefix){ return prefix + Math.random().toString(36).slice(2,9) + Date.now().toString(36); }

// ===== Авторизация / роли =====
function login(username, password){
  return PASSWORDS[username] && PASSWORDS[username] === password;
}
function roleOf(username){
  if(username === 'missveronika') return 'director';
  if(['teacher1','teacher2','teacher3'].includes(username)) return 'teacher';
  return 'guest';
}

// ===== Выборки =====
function getGroupsForUser(db, username){
  const role = roleOf(username);
  return Object.values(db.groups).filter(g => {
    if(role === 'director') return true;
    if(role === 'teacher') return g.teacher === username; // учитель видит все свои (и только свои), приват директора — не его
    return false;
  }).sort((a,b)=>a.createdAt-b.createdAt);
}
function getStudentsByGroup(db, groupId){
  return Object.values(db.students).filter(s=>s.groupId===groupId);
}

// ===== Мутации =====
function addGroup(db, {name, teacher, isPrivate}){
  const id = uid('g');
  db.groups[id] = {id, name, teacher, isPrivate: !!isPrivate, createdAt: Date.now()};
  saveDB(db);
  return id;
}
function addStudent(db, {groupId, name}){
  const id = uid('s');
  db.students[id] = {id, name, groupId, points:0, history:[]};
  saveDB(db);
  return id;
}
function deleteGroup(db, id){
  for(const sid of Object.keys(db.students)){
    if(db.students[sid].groupId === id) delete db.students[sid];
  }
  delete db.groups[id];
  saveDB(db);
}
function deleteStudent(db, id){
  delete db.students[id];
  saveDB(db);
}
function moveStudent(db, studentId, toGroupId){
  const s = db.students[studentId];
  if(!s) return;
  s.groupId = toGroupId;
  saveDB(db);
}
function changePoints(db, studentId, delta, note=''){
  const s = db.students[studentId];
  if(!s) return;
  s.points += delta;
  s.history.push({ts:Date.now(), delta, note});
  saveDB(db);
}
function deleteHistoryEntry(db, studentId, index){
  const s = db.students[studentId];
  if(!s) return;
  s.history.splice(index,1);
  saveDB(db);
}
